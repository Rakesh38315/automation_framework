package utils;

import java.time.Duration;

import io.appium.java_client.TouchAction;
import io.appium.java_client.touch.WaitOptions;
import io.appium.java_client.touch.offset.PointOption;

public class GestureUtils {
	/*
	private int mAndroidScrollSteps;
	private boolean androidScrollFlag;
	private String androidPageSourceBeforeScroll;
	private TouchAction touchAction;
	private String androidPageSourceAfterScroll;
	public static boolean isAndroidScrollableElementFound;
	private int mScrollX, mScrollY;
	public static int scrollX = VisualUtils.getAppWidth() / 2;
	public static int scrollYDown = VisualUtils.getAppHeight() / 2 + VisualUtils.getAppHeight() / 4;
	public static int scrollYUp = VisualUtils.getAppHeight() / 2 - VisualUtils.getAppHeight() / 4;
	
	
	public enum LocatorStrategy {
		ANDROID_LOCATOR_STRATEGY_TEXT_CONTAINS, ANDROID_LOCATOR_STRATEGY_TEXT, ANDROID_LOCATOR_STRATEGY_ID,ANDROID_LOCATOR_STRATEGY_XPATH_WITH_TEXT_VIEW,
		ANDROID_LOCATOR_STRATEGY_XPATH, ANDROID_LOCATOR_STRATEGY_TEXT_STARTS_WITH,
		NONE
	}
	
	public enum ScrollDiection {
		RIGHT, LEFT, UP, DOWN, NEXT, PREVIOUS, FLEXIBLE_UP, FLEXIBLE_DOWN
	}
	
	public boolean androidScroll(String attributeValue, LocatorStrategy androidLocatorStrategy, int androidScrollSteps) {
		try {
			mAndroidScrollSteps = androidScrollSteps;
			setAndroidScrollFlag(attributeValue, androidLocatorStrategy);
			while (androidScrollFlag) {
				if (androidScrollSteps < 0)
					getScrollPoint(ScrollDiection.DOWN);
				else
				     getScrollPoint(ScrollDiection.UP);
				androidPageSourceBeforeScroll = DriverManager.getDriver().getPageSource();
				touchAction.press(PointOption.point(mScrollX, mScrollY))
						.waitAction(WaitOptions.waitOptions(Duration.ofSeconds(1)))
						.moveTo(PointOption.point(mScrollX, mScrollY + mAndroidScrollSteps)).release().perform();
				androidPageSourceAfterScroll = DriverManager.getDriver().getPageSource();
				setAndroidScrollFlag(attributeValue, androidLocatorStrategy);
 
				 
 
				if (androidScrollFlag) {
					if (isReachedToBottom()) {
						androidScrollFlag = false;
 
						isAndroidScrollableElementFound = false;
						break;
					}
				}
			}
			System.out.println("Is Scrollable Element Found:"+isAndroidScrollableElementFound);
			return isAndroidScrollableElementFound;
				
		} catch (Throwable e) {
			e.printStackTrace();
			return false;
		}
	
			
		}
	
	public void setAndroidScrollFlag(String attributeValue, LocatorStrategy androidLocatorStrategy) {
		try {
			if (androidLocatorStrategy == null)
				androidLocatorStrategy = LocatorStrategy.ANDROID_LOCATOR_STRATEGY_TEXT_CONTAINS;
			if (DriverManager.getDriver().getPageSource().contains(attributeValue)) {
				if (ElementUtils.isDisplayed(2, 1, attributeValue, androidLocatorStrategy, null, null, null)) {
					androidScrollFlag = false;
					isAndroidScrollableElementFound = true;
				} else {
					androidScrollFlag = true;
					if (mAndroidScrollSteps < 0)
						mAndroidScrollSteps = getScrollSteps(ScrollDiection.FLEXIBLE_DOWN);
					else
						mAndroidScrollSteps = getScrollSteps(ScrollDiection.FLEXIBLE_UP);
				}
			} else {
				androidScrollFlag = true;
			}
		} catch (Throwable e) {
			e.printStackTrace();
		}
	}
	*/

}
